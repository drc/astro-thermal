---
const ip = Astro.request.headers.get("x-forwarded-for");
const userAgent = Astro.request.headers.get("user-agent");
import { actions } from "astro:actions";
const result = Astro.getActionResult(actions.handlePhoto);
const images = await Astro.callAction(actions.getCurrentPhotos, {});
---

<main>
    <h1>ReceiptCam</h1>
    {result?.error && <p style="color: red">{result.error}</p>}
    <form method="post" action={actions.handlePhoto} enctype="multipart/form-data">
        <label for="file_input" class="btn secondary" tabindex="0"> Take or upload a photo </label>
        <input type="file" accept="image/*" name="picture" id="file_input" style="display: none;" />
        <input type="hidden" name="ip" value={ip ?? ""} />
        <input type="hidden" name="userAgent" value={userAgent ?? ""} />
        <img alt="Placeholder" id="result" />
        <button type="submit" class="btn primary">Print!</button>
    </form>
    {
        images?.data && images.data.length > 0 && (
            <>
                <h2>Recent Photos</h2>
                <div style="display: flex; flex-wrap: wrap; gap: 1rem; justify-content: center;">
                    {images.data.map((img) => (
                        <img
                            src={`data:image/png;base64,${Buffer.from(img.data).toString("base64")}`}
                            alt={`Uploaded image ${img.id}`}
                            height="200"
                            width="auto"
                        />
                    ))}
                </div>
            </>
        )
    }
</main>

<style>

    main {
        align-items: center;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 22px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.18);
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        margin: 0;
        height: min(80svh, 90vh);
        padding: 2rem;
        width: min(800px, 80%);
        overflow-y: auto;
    }
    form {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    img {
        max-width: 300px;
        margin-top: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    img:not([src]),
    img[src=""] {
        display: none;
    }

    .btn {
        cursor: pointer;
        display: inline-block;
        padding: 0.6rem 1.1rem;
        border-radius: 12px;
        color: white;
        font-weight: 600;
        font-size: 1rem;
        border: none;
        background-image: linear-gradient(180deg, rgba(255, 255, 255, 0.12), rgba(0, 0, 0, 0.06));
        backdrop-filter: blur(0.2px);
        box-shadow:
            0 6px 18px rgba(11, 114, 133, 0.14),
            inset 0 -2px 0 rgba(255, 255, 255, 0.06);
        transition:
            transform 120ms ease,
            box-shadow 120ms ease,
            filter 120ms ease;
        margin-top: 0.6rem;
        text-align: center;
    }

    .btn:active {
        transform: translateY(1px) scale(0.998);
        box-shadow:
            0 3px 10px rgba(11, 114, 133, 0.12),
            inset 0 -1px 0 rgba(255, 255, 255, 0.04);
    }

    .btn.primary {
        background: linear-gradient(180deg, var(--color-primary), var(--color-primary-dark));
        box-shadow:
            0 8px 22px rgba(11, 114, 133, 0.18),
            inset 0 -3px 0 rgba(255, 255, 255, 0.04);
    }

    .btn.secondary {
        background: linear-gradient(180deg, var(--color-secondary), var(--color-secondary-dark));
        box-shadow:
            0 8px 22px rgba(14, 165, 255, 0.14),
            inset 0 -3px 0 rgba(255, 255, 255, 0.04);
    }
</style>

<script>
    const fileDataURL = (file: Blob) =>
        new Promise((resolve, reject) => {
            let fr = new FileReader();
            fr.onload = () => resolve(fr.result);
            fr.onerror = reject;
            fr.readAsDataURL(file);
        });

    function showResult(file: Blob) {
        fileDataURL(file)
            .then((data) => {
                const resultImg = document.getElementById("result") as HTMLImageElement | null;
                if (resultImg) {
                    resultImg.src = data as string;
                }
            })
            .catch((err) => console.log(err));
    }

    const fileInput = document.querySelector("#file_input") as HTMLInputElement | null;
    if (fileInput) {
        fileInput.addEventListener("change", function () {
            const files = this.files;
            console.log({ files });
            const file = files && files[0];
            if (file) {
                showResult(file);
            }
        });
    }

    // allow keyboard activation of the label that opens the file picker
    const fileLabel = document.querySelector('label[for="file_input"]') as HTMLElement | null;
    if (fileLabel && fileInput) {
        fileLabel.addEventListener("keydown", (e) => {
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                fileInput.click();
            }
        });
    }
</script>
